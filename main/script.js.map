{"mappings":"ACAO,MAAM;IACX,QAAQ,EAAE,CAAC;IAEX,YAAY,QAAQ,CAAE;QACpB,MAAM,UAAU,SAAS,aAAa,CAAC;QACvC,MAAM,cAAc,QAAQ,SAAS,CAAC,KAAK,CAAC;QAE5C,QAAQ,SAAS,GAAG;QAEpB,IAAI,SACF,YAAY,OAAO,CAAC,CAAC;YACnB,MAAM,OAAO,SAAS,aAAa,CAAC;YACpC,KAAK,WAAW,GAAG;YAEnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YAChB,QAAQ,WAAW,CAAC;QACtB;IAEJ;AACF;;;ADjBA,KAAK,cAAc,CAAC;AAEpB,aAAa;AACb,MAAM,2CAAqB,SAAS,aAAa,CAAC;AAClD,MAAM,iDAA2B,yCAAmB,cAAc;AAElE,KAAK,GAAG,CAAC,oBAAoB;IAC3B,SAAS;IACT,iBAAiB;IACjB,kBAAkB;AACpB;AAEA,KACG,QAAQ,CAAC;IACR,eAAe;QACb,SAAS;QACT,OAAO;IACT;AACF,GACC,EAAE,CAAC,oBAAoB;IACtB,SAAS;IACT,UAAU;AACZ,GACC,EAAE,CAAC,oBAAoB;IACtB,kBAAkB;IAClB,UAAU;AACZ;AAEF,cAAc;AACd,MAAM,+CAAyB,IAAI,CAAA,GAAA,yCAAQ,EAAE,8BAC1C,KAAK;AACR,MAAM,+CAAyB,IAAI,CAAA,GAAA,yCAAQ,EAAE,8BAC1C,KAAK;AAER,KAAK,GAAG,CAAC,8CAAwB;IAAE,SAAS;AAAK;AACjD,KAAK,GAAG,CAAC,8CAAwB;IAAE,SAAS;AAAK;AAEjD,KACG,QAAQ,CAAC;IACR,eAAe;QACb,SAAS;QACT,OAAO;QACP,KAAK;QACL,OAAO;IACT;AACF,GACC,EAAE,CAAC,8CAAwB;IAC1B,SAAS;IACT,SAAS;AACX,GACC,EAAE,CAAC,8CAAwB;IAC1B,SAAS;IACT,SAAS;AACX;AAEF,UAAU;AACV,KAAK,GAAG,CAAC,KAAK,KAAK,CAAC,OAAO,CAAC,yBAAyB;IACnD,SAAS;IACT,GAAG;AACL;AAEA,KACG,QAAQ,CAAC;IACR,eAAe;QACb,SAAS;QACT,YAAY;QACZ,OAAO;QACP,KAAK;QACL,OAAO;IACT;AACF,GACC,EAAE,CAAC,KAAK,KAAK,CAAC,OAAO,CAAC,yBAAyB;IAC9C,SAAS;IACT,GAAG;IACH,SAAS;AACX;AAEF,wBAAwB;AACxB,MAAM,gDAA0B,SAAS,aAAa,CACpD;AAEF,MAAM,sDAAgC,8CAAwB,cAAc;AAE5E,KAAK,GAAG,CAAC,+CAAyB;IAChC,SAAS;IACT,iBAAiB;IACjB,kBAAkB;AACpB;AAEA,KACG,QAAQ,CAAC;IACR,eAAe;QACb,SAAS;QACT,OAAO;QACP,KAAK;QACL,OAAO;IACT;AACF,GACC,EAAE,CAAC,+CAAyB;IAC3B,SAAS;IACT,UAAU;AACZ,GACC,EAAE,CAAC,+CAAyB;IAC3B,kBAAkB;AACpB;AAEF,eAAe;AACf,KAAK,GAAG,CAAC,KAAK,KAAK,CAAC,OAAO,CAAC,8BAA8B;IACxD,SAAS;IACT,GAAG;AACL;AAEA,KACG,QAAQ,CAAC;IACR,eAAe;QACb,SAAS;QACT,YAAY;QACZ,OAAO;QACP,KAAK;QACL,OAAO;IACT;AACF,GACC,EAAE,CAAC,KAAK,KAAK,CAAC,OAAO,CAAC,8BAA8B;IACnD,SAAS;IACT,GAAG;IACH,SAAS;AACX","sources":["src/script.js","src/scripts/SplitText.js"],"sourcesContent":["import { SplitText } from \"./scripts/SplitText\";\n\ngsap.registerPlugin(ScrollTrigger);\n\n// AFFORDABLE\nconst affordableLinePath = document.querySelector(\"#affordable-line > path\");\nconst affordableLinePathLength = affordableLinePath.getTotalLength();\n\ngsap.set(\"#affordable-line\", {\n  opacity: 0,\n  strokeDasharray: affordableLinePathLength,\n  strokeDashoffset: affordableLinePathLength,\n});\n\ngsap\n  .timeline({\n    scrollTrigger: {\n      trigger: \"#affordable-line\",\n      start: \"top 70%\",\n    },\n  })\n  .to(\"#affordable-line\", {\n    opacity: 1,\n    duration: 0,\n  })\n  .to(\"#affordable-line\", {\n    strokeDashoffset: 0,\n    duration: 1,\n  });\n\n// THE PROBLEM\nconst problemParagraph1chars = new SplitText(\"#the-problem__paragraph--1\")\n  .chars;\nconst problemParagraph2chars = new SplitText(\"#the-problem__paragraph--2\")\n  .chars;\n\ngsap.set(problemParagraph1chars, { opacity: 0.05 });\ngsap.set(problemParagraph2chars, { opacity: 0.05 });\n\ngsap\n  .timeline({\n    scrollTrigger: {\n      trigger: \"#the-problem__text\",\n      start: \"top 50%\",\n      end: \"bottom 50%\",\n      scrub: 0.5,\n    },\n  })\n  .to(problemParagraph1chars, {\n    opacity: 1,\n    stagger: 0.01,\n  })\n  .to(problemParagraph2chars, {\n    opacity: 1,\n    stagger: 0.01,\n  });\n\n// METRICS\ngsap.set(gsap.utils.toArray(\".metrics__cards > li\"), {\n  opacity: 0,\n  y: 60,\n});\n\ngsap\n  .timeline({\n    scrollTrigger: {\n      trigger: \"#metrics\",\n      endTrigger: \".metrics__cards\",\n      start: \"top center\",\n      end: \"bottom center\",\n      scrub: true,\n    },\n  })\n  .to(gsap.utils.toArray(\".metrics__cards > li\"), {\n    opacity: 1,\n    y: 0,\n    stagger: 0.1,\n  });\n\n// PROBLEM SOLUTION LINE\nconst problemSolutionLinePath = document.querySelector(\n  \"#problem-solution-line-path\"\n);\nconst problemSolutionLinePathLength = problemSolutionLinePath.getTotalLength();\n\ngsap.set(problemSolutionLinePath, {\n  opacity: 0,\n  strokeDasharray: problemSolutionLinePathLength,\n  strokeDashoffset: problemSolutionLinePathLength,\n});\n\ngsap\n  .timeline({\n    scrollTrigger: {\n      trigger: problemSolutionLinePath,\n      start: \"top center\",\n      end: \"bottom center\",\n      scrub: true,\n    },\n  })\n  .to(problemSolutionLinePath, {\n    opacity: 1,\n    duration: 0,\n  })\n  .to(problemSolutionLinePath, {\n    strokeDashoffset: 0,\n  });\n\n// OUR SOLUTION\ngsap.set(gsap.utils.toArray(\".our-solution__cards > li\"), {\n  opacity: 0,\n  y: 60,\n});\n\ngsap\n  .timeline({\n    scrollTrigger: {\n      trigger: \"#our-solution\",\n      endTrigger: \".our-solution__cards\",\n      start: \"top center\",\n      end: \"bottom center\",\n      scrub: true,\n    },\n  })\n  .to(gsap.utils.toArray(\".our-solution__cards > li\"), {\n    opacity: 1,\n    y: 0,\n    stagger: 0.1,\n  });\n","export class SplitText {\n  chars = [];\n\n  constructor(selector) {\n    const element = document.querySelector(selector);\n    const initialText = element.innerText.split(\"\");\n\n    element.innerText = \"\";\n\n    if (element) {\n      initialText.forEach((char) => {\n        const span = document.createElement(\"span\");\n        span.textContent = char;\n\n        this.chars.push(span);\n        element.appendChild(span);\n      });\n    }\n  }\n}\n"],"names":[],"version":3,"file":"script.js.map"}